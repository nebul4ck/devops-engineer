---
##
# Alberto Gonzalez Mesas, <alberto.gonzalez@lineagrafica.es>
# Fri Apr 16 12:00:00 CEST 2021
##

AWSTemplateFormatVersion: 2010-09-09
Description:  This AWS CloudFormation template creates an Application Load Balancer which will be used
  as single point of failure for all the applications. Also, a security group for the ALB and a main Listener with SSL are created from this template.

# Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Set up the environment
        Parameters:
          - ClientName
          - ClientID
          - Environment
          - ProjectName
      - Label:
          default: Set up the networking configuration
        Parameters:
          - CidrAllowed
      - Label:
          default: Configure the Application Load Balancer
        Parameters:
          - IpAddressType
          - SchemeLoadBalancingType
          - LoadBalancerType
          - PublicSubnetsList
      - Label:
          default: Configure the Listener of the Application Load Balancer
        Parameters:
          - DeletionALBProtectionEnabled
          - LoadBalancerIdleTimeout
          - RoutingHTTP2Enabled
          - AccessS3LogsEnabled
          - PrefixAccessS3Logs
          - CertificateId
          - SslPolicy

# Parameters
Parameters:
  ClientName:
    Type: String
    Description: The Name of the client.
    MinLength: 1
  ClientID:
    Type: String
    Description: The ID of the client in WHMCS.
    MinLength: 1
  Environment:
    Type: String
    Description: The name of the application to tag the generated resources.
    MinLength: 1
    AllowedValues:
      - development
      - staging
      - production
  ProjectName:
    Type: String
    Description: The name of the project (product). ie, autoscaling.
    MinLength: 1
    AllowedValues:
      - asg
  ApplicationName:
    Description: Name of the Application Load Balancer
    Type: String
    MinLength: 1
  CidrAllowed:
    Description: The IP address range allowed to access.
    Type: String
    Default: 0.0.0.0/0
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  # Load Balancer
  IpAddressType:
    Description: The IP address type. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
    Type: String
  LoadBalancerType:
    Description: The type of the load balancer. The default is application
    Type: String
    Default: application
    AllowedValues:
      - application
      - network
  PublicSubnetsList:
    Description: The networks where the ALB is attached.
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: You must specify either subnets or subnet mappings. You must specify
      subnets from at least two Availability Zones.
  SchemeLoadBalancingType:
    Description: Is the Load Balancer an external or internal load balancer?
    Type: String
    Default: internet-facing
    AllowedValues:
      - internal
      - internet-facing
  # Load Balancer Attributes
  DeletionALBProtectionEnabled:
    Description: Indicates whether deletion protection is enabled or not
    Type: String
    Default: true
    AllowedValues:
      - false
      - true
  LoadBalancerIdleTimeout:
    Description: The idle timeout value, in seconds. The valid range is 1-4000 seconds
    Type: Number
    Default: 60
    MinValue: 1
    MaxValue: 4000
  RoutingHTTP2Enabled:
    Description: Indicates whether HTTP/2 is enabled or not
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  AccessS3LogsEnabled:
    Description: Indicates whether access logs are enabled or not
    Type: String
    Default: true
    AllowedValues:
      - false
      - true
  PrefixAccessS3Logs:
    Description: The prefix and name for the folder that hosts the access logs in the S3 bucket
    Type: String
    Default: albaccesslogs

  # Load Balancer Listener
  CertificateId:
    Description: The default ARN SSL server certificate for a secure listener. At least one certificate must be
      provided if the Load Balancer listener protocol is HTTPS or TLS
    Type: String
  SslPolicy:
    Description: The security policy that defines which protocols and ciphers are supported by the ALB
    Type: String
    Default: ELBSecurityPolicy-2016-08
    AllowedValues:
      - ELBSecurityPolicy-2016-08
      - ELBSecurityPolicy-TLS-1-0-2015-04
      - ELBSecurityPolicy-TLS-1-1-2017-01
      - ELBSecurityPolicy-TLS-1-2-2017-01
      - ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      - ELBSecurityPolicy-FS-2018-06
      - ELBSecurityPolicy-FS-1-1-2019-08
      - ELBSecurityPolicy-FS-1-2-2019-08
      - ELBSecurityPolicy-FS-1-2-Res-2019-08

# Resources
Resources:
  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ClientName}-${ClientID}-${ProjectName}-alb-sg
      GroupDescription: Enable HTTPS access from different subnets to the ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CidrAllowed
          Description: Allow HTTPS access from Internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrAllowed
          Description: Allow HTTP access from Internet
      VpcId: !ImportValue AsgVpcId
      Tags:
        - Key: Name
          Value: !Sub ${ClientName}-${ClientID}-${ProjectName}-alb-sg
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !Ref SchemeLoadBalancingType
      Name: !Sub ${ClientName}-${ClientID}-${ProjectName}-alb
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !ImportValue AsgPublicSubnetA
        - !ImportValue AsgPublicSubnetB
      Type: !Ref LoadBalancerType
      IpAddressType: !Ref IpAddressType
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: !Sub ${DeletionALBProtectionEnabled}
        - Key: idle_timeout.timeout_seconds
          Value: !Sub ${LoadBalancerIdleTimeout}
        - Key: routing.http2.enabled
          Value: !Sub ${RoutingHTTP2Enabled}
        - Key: access_logs.s3.enabled
          Value: !Sub ${AccessS3LogsEnabled}
        - Key: access_logs.s3.bucket
          Value: !ImportValue S3ALBAccessLog
        - Key: access_logs.s3.prefix
          Value: !Sub ${PrefixAccessS3Logs}
      Tags:
        - Key: Name
          Value: !Sub ${ClientName}-${ClientID}-${ProjectName}-alb
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Application Load Balancer Listeners (HTTP & HTTPS)
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "You've reached the default rule of the Load Balancer because no host based rules were matched!"
            StatusCode: 200
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateId
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "You've reached the default rule of the Load Balancer because no host based rules were matched!"
            StatusCode: 200
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy

# Outputs
Outputs:
  ALBARN:
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: ALBArn
    Description: Application Load Balancer ARN exported as a Name.
  ALBListenerHTTP:
    Value: !Ref ALBListenerHTTP
    Export:
      Name: ALBListenerHTTP
    Description: Application Load Balancer Listener ARN exported as a Name.
  ALBListenerHTTPS:
    Value: !Ref ALBListenerHTTPS
    Export:
      Name: ALBListenerHTTPS
    Description: Application Load Balancer Listener ARN exported as a Name.
  ALBDNSName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: ALBDNSName
    Description: Application Load Balancer DNS exported as a Name.
  ALBHostedZoneId:
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: ALBHostedZoneId
    Description: The ID of the Route53 Hosted Zone associated with the LB exported as a Name.
  ALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Export:
      Name: ALBSecurityGroup
    Description: ALB Security Group ID exported as a Name.
  ALBDNSEndpoint:
    Value: !Sub https://${ApplicationLoadBalancer.DNSName}
    Description: Application Load Balancer URL Endpoint.
    Export:
      Name: ALBDNSEndpoint
