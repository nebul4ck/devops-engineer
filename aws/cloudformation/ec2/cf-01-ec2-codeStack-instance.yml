---

##
# Alberto Gonz√°lez Mesas, <alberto.gonzalez@euigs.com>
# thu Dic 18 12:00:00 CEST 2019
##

AWSTemplateFormatVersion: 2010-09-09
Description: >
  'Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the Weekly Golden AMI. This example creates an EC2 security group
  for the instance to give you SSH access.'

##############################################################################################
# Metadata                                                                                   #
##############################################################################################

Metadata:
  AWS::CloudFormation::Interface:

    ParameterGroups:
      - Label:
          default: Set up account configuration.
        Parameters:
          - AccountName
          - InstanceName
      - Label:
          default: Set up the environment.
        Parameters:
          - VolumeSize
          - VolumeType
          #- SnapshotId
          - IamInstanceProfile
          - ImageId
          - InstanceType
          #- SSHLocation
          #- KeyName
          #- SecurityGroup
          - Subnet
          - euigsTLTNetworkCidrIp
          - VpcId
          #- AvailabilityZone
      - Label:
          default: Extra tags
        Parameters:
          - AutoDeploy
          - ApplicationName

    ParameterLabels:
      AccountName:
        default: Account Name

##############################################################################################
# Parameters                                                                                 #
##############################################################################################

Parameters:
  AccountName:
    Type: String
    Description: 'The account name, ie ''euigs-dev-base'''
    MinLength: 1
  InstanceName:
    Description: 'Select a valid instance name'
    Type: String
  ApplicationName:
    Type: String
    Description: >-
      What is the software here installed?, ie AnsibleApacheHardening. CodeDeploy Application use this tag.
    Default: 'AnsibleApacheHardening'
  # Environment EC2
  VolumeSize:
    Description: 'Select a size for the volume, ie 10 (for 10GB)'
    Type: String
    Default: '10'
    MinLength: 1
  VolumeType:
    Description: 'Select the generation EBS volume'
    Type: String
    Default: 'gp2'
    AllowedValues:
      - 'gp2'
      - 'io1'
      - 'st1'
      - 'sc1'
  #SnapshotId:
  #  Description: 'Select a snapshot ID, ie snap-056854445fdd94f79'
  #  Type: String
  #  Default: 'snap-056854445fdd94f79'
  IamInstanceProfile:
    Description: 'Select a valid instance Role'
    Type: 'String'
    Default: 'arn:aws:iam::691268106430:role/euigs-dev-tlt-AmazonSSMRoleForInstancesQuickSetup'
  ImageId:
    Description: ImageId of your existing Amazon Machine Image (AMI)
    Type: AWS::EC2::Image::Id
    ConstraintDescription: must be the ImageId of an existing Amazon Machine Image.
    Default: 'ami-06ce3edf0cff21f07'
  InstanceType:
    Description: EC2 instance type
    Type: String 
    Default: 't2.micro'
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - g3.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r3.12xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  #SSHLocation:
  #  Description: The IP address range that can be used to SSH to the EC2 instances
  #  Type: String
  #  MinLength: 9
  #  MaxLength: 18
  #  Default: 10.93.3.0/24
  #  AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  #  ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #KeyName:
  #  Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance.'
  #  Type: AWS::EC2::KeyPair::KeyName
  #  ConstraintDescription: must be the name of an existing EC2 KeyPair.
  #SecurityGroup:
  #  Description: 'A security group ID, such as sg-a123fd85.'
  #  Type: AWS::EC2::SecurityGroup::Id
  #  Default: 'sg-049a32317d912553c'
  Subnet:
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC).
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: >-
      must be a list of two existing subnets associated with two different
      availability zones. They should be residing in the selected Virtual Private
      Cloud.
    Default: 'subnet-0cb4c2bd47a1d7540'
  euigsTLTNetworkCidrIp:
    Type: String
    Description: The cidr IP from TLT Network.
    ConstraintDescription: must be a valid cidr value.
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "10.240.24.0/24"
  #AvailabilityZone:
  #  Description: 'An Availability Zone, such as us-west-2a.'
  #  Type: AWS::EC2::AvailabilityZone::Name
  VpcId:
    Description: An Availability Zone, such as us-west-2a.
    Type: AWS::EC2::VPC::Id
  # Extra Tags
  AutoDeploy:
    Type: String
    Description: >-
      The software here installed is deployed over CodeCommit -> CodePipeline -> CodeDeploy?
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'

##############################################################################################
# Resources                                                                                  #
##############################################################################################

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/S access via port 80/443
      GroupName: !Sub ${AccountName}-${InstanceName}-sg
      SecurityGroupIngress:
      - CidrIp: !Sub ${euigsTLTNetworkCidrIp}
        Description: enable HTTPS access
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      - CidrIp: !Sub ${euigsTLTNetworkCidrIp}
        Description: enable HTTP access
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId: !Sub ${VpcId}
      Tags:
        - Key: Name
          Value: !Sub '${AccountName}-${InstanceName}-sg'
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Join [",", [!Select [0, !GetAZs ]]]
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Sub '${VolumeSize}'
            VolumeType: !Sub '${VolumeType}'
      DisableApiTermination: false
      # This optimization isn't available with all instance types.
      EbsOptimized: false
      IamInstanceProfile: !Sub '${IamInstanceProfile}'
      ImageId: !Sub '${ImageId}'
      InstanceInitiatedShutdownBehavior: 'stop'
      InstanceType: !Sub '${InstanceType}'
      #KeyName: !Sub '${KeyName}'
      Monitoring: false
      # You cannot specify this option if you're launching more than one instance in the request.
      NetworkInterfaces: 
        - AssociatePublicIpAddress: false
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet:
          #  - !Sub '${SecurityGroup}'
            - !Ref InstanceSecurityGroup
          SubnetId: !Sub '${Subnet}'
      SourceDestCheck: true
      Tenancy: 'default'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo "Upgrading System..."
            yum update -y
            echo "Ensure CodeDeployAgent is presente..."
            yum install ruby -y
            yum install wget -y
            cd /home/ec2-user
            wget https://aws-codedeploy-eu-west-1.s3.eu-west-1.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            echo "Ensure Ansible and dependencies are present..."
            amazon-linux-extras install ansible2 -y
            yum install python3 -y
            echo "Ensure Git tool is presente..."
            yum install git -y
            echo "Ensure awscli by default is removed..."
            yum remove awscli -y
            echo "Ensure Python-pip is present..."
            yum install python-pip -y
            echo "Ensure awscli is installed from pip..."
            pip install awscli
            echo "Ensure Git credential-helper is configured..."
            cat <<EOF > /home/ec2-user/.gitconfig
            [credential]
              helper = !aws codecommit credential-helper $@
              UseHttpPath = true
            EOF
            chown ec2-user:ec2-user /home/ec2-user/.gitconfig
      Tags:
        - Key: Name
          Value: !Sub '${AccountName}-${InstanceName}-ec2'
        - Key: AutoDeploy
          Value: !Sub '${AutoDeploy}'
        - Key: ApplicationName
          Value: !Sub '${ApplicationName}'