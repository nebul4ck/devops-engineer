---

# Alberto Gonz√°lez Mesas, <alberto.gonzalez@euigs.com>
# Wed, Oct  7, 2020  3:57:07 PM 

# Template info
AWSTemplateFormatVersion: 2010-09-09
Description: Creates EC2 instance with an ASG configured to turn off and on the instances every weekday.

# Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Configure the environment.
        Parameters:
          - AccountName
          - ApplicationName
          - GoldenAMI
          - InstanceType
          - ApplicationInstanceProfile
      - Label:
           default: Configure AutoScaling Group.
        Parameters:
           - DesiredASGCapacity
           - MinimumASGCapacity
           - MaximumASGCapacity
      - Label:
          default: Configure Target Group.
        Parameters:
          - ApplicationTargetGroupARN
      - Label:
           default: Configure the Networking.
        Parameters:
           - Subnets
           - ApplicationEC2SecurityGroup

# Parameters
Parameters:
  # Environment
  AccountName:
    Type: String
    Description: A prefix to tag the generated resources
    MinLength: 1
  ApplicationName:
    Type: String
    Description: The name of the application to tag the generated resources
    MinLength: 1
  GoldenAMI: 
    Type: AWS::EC2::Image::Id
    Description: EUIGS Golden AMI-ID
    MinLength: 1
  InstanceType:
    Type: String
    Description: EC2 instance type
    MinLength: 1
  # AutoScaling group
  DesiredASGCapacity:
    Type: Number
    Description: The initial number of instances of Autoscaling group.
    ConstraintDescription: must be between 1 and 10 EC2 instances.
    Default: 1
    MinValue: 1
    MaxValue: 10
  MinimumASGCapacity:
    Type: Number
    Description: The minimum number of instances.
    ConstraintDescription: must be at least 1 EC2 instances.
    Default: 1
    MinValue: 1
    MaxValue: 1
  MaximumASGCapacity:
    Type: Number
    Description: The maximum number of instances.
    ConstraintDescription: must be at least 1 EC2 instances.
    Default: 1
    MinValue: 1
    MaxValue: 10
  # Target group
  ApplicationTargetGroupARN:
    Type: String
    Description: Application Target Group Arn.
  # Network
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  ApplicationEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Application Security Group (ie ef-shared-base-jenkins-sg).

# Conditions
Conditions:
  IsTargetGroupAssociated: !Not [!Equals [ !Ref ApplicationTargetGroupARN, '' ]]

Resources:

  # Application Autoscaling Group
  ApplicationASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - "eu-west-1a"
        - "eu-west-1b"
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref ApplicationLaunchConfig
      MinSize: !Ref MinimumASGCapacity
      MaxSize: !Ref MaximumASGCapacity
      DesiredCapacity: !Ref DesiredASGCapacity
      HealthCheckType: EC2
      HealthCheckGracePeriod: 60
      Cooldown: '80'
      TargetGroupARNs:
        - !If [ IsTargetGroupAssociated, !Ref ApplicationTargetGroupARN, !Ref "AWS::NoValue" ]
      Tags:
        - Key: Name
          Value: !Sub ${AccountName}-${ApplicationName}-asg
          PropagateAtLaunch: true
      #     PropagateAtLaunch: true
      #   - Key: ApplicationID
      #     Value: !Sub ${ApplicationName}
      #     PropagateAtLaunch: true
      #   - Key: Role
      #     Value: !Ref TagRole
      #     PropagateAtLaunch: true
      #   - Key: Environment
      #     Value: !Ref TagEnvironment
      #     PropagateAtLaunch: true
      #   - Key: SLA
      #     Value: !Ref TagSLA
      #     PropagateAtLaunch: true
      #   - Key: StartTime
      #     Value: !Ref TagStartTime
      #     PropagateAtLaunch: true
      #   - Key: EndTime
      #     Value: !Ref TagEndTime
      #     PropagateAtLaunch: true
      #   - Key: CECO
      #     Value: !Ref TagCECO
      #     PropagateAtLaunch: true
      #   - Key: Operation
      #     Value: !Ref TagOperation
      #     PropagateAtLaunch: true
      #   - Key: Confidentiality
      #     Value: !Ref TagConfidentiality
      #     PropagateAtLaunch: true
      #   - Key: Compliance
      #     Value: !Ref TagCompliance
      #     PropagateAtLaunch: true
    UpdatePolicy :
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
          MinSuccessfulInstancesPercent: 100
        PauseTime: PT5M
        WaitOnResourceSignals: true
        SuspendProcesses:
          - ScheduledActions
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
  # Application Autoscaling Group Schedule Action: Turn Off
  TurnOffAutoScalingScheduledAction:   
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref ApplicationASG
      DesiredCapacity: 0
      MaxSize: 0
      MinSize: 0
      Recurrence: 0 20 * * MON-FRI
  # Application Autoscaling Group Schedule Action: Turn On 
  TurnOnAutoScalingScheduledAction:   
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref ApplicationASG
      MinSize: !Ref MinimumASGCapacity
      MaxSize: !Ref MaximumASGCapacity
      DesiredCapacity: !Ref DesiredASGCapacity
      Recurrence: 0 7 * * MON-FRI
  ApplicationLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
          config:
              packages:
                  yum:
                      ansible: []
                      java-openjdk11: []
              #commands: 
              #   01_uploads:
              #       command:
              #          echo "done" > /tmp/test.txt
    Properties:
      SecurityGroups:
        - !Ref ApplicationEC2SecurityGroup
      ImageId: !Ref   GoldenAMI
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --region ${AWS::Region} --resource ApplicationLaunchConfig 
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource ApplicationASG
        
# Outputs
Outputs:
  LaunchConfigurationARN:
    Value: !Ref ApplicationLaunchConfig
    Description: Application Launch Configuration ID.
  ApplicationASGARN:
    Value: !Ref ApplicationASG
    Description: Application Autoscaling Group ID.