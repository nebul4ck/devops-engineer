---
# Maria Romero - maria.romero@euigs.com
# miÃ© abr 03 12:19:21 CEST 2019

# Template info
AWSTemplateFormatVersion: 2010-09-09
Description: Creates EC2 instance with an ASG configured to turn off and on the instances every weekday.

# Parameters
Parameters:
  AccountName:
    Type: String
    Description: A prefix to tag the generated resources
    MinLength: 1
  ApplicationName:
    Type: String
    Description: The name of the application to tag the generated resources
    MinLength: 1
  ASGAMIId: 
    Type: AWS::EC2::Image::Id
    Description: EC2 AMI Id
    MinLength: 1
  InstanceType:
    Type: String
    Description: EC2 instance type
    MinLength: 1
  DesiredASGCapacity:
    Type: Number
    Description: The initial number of instances of Autoscaling group.
    ConstraintDescription: must be between 1 and 10 EC2 instances.
    Default: 1
    MinValue: 1
    MaxValue: 10
  MinimumASGCapacity:
    Type: Number
    Description: The minimum number of instances.
    ConstraintDescription: must be at least 1 EC2 instances.
    Default: 1
    MinValue: 1
    MaxValue: 1
  MaximumASGCapacity:
    Type: Number
    Description: The maximum number of instances.
    ConstraintDescription: must be at least 1 EC2 instances.
    Default: 1
    MinValue: 1
    MaxValue: 10
  # Network
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  EUIGSCidrIp:
    Type: String
    Description: The cidr IP from EUIGS.
    ConstraintDescription: must be a valid cidr value.
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "10.93.0.0/16"
  Private1a:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId in your Virtual Private Cloud (VPC) for eu-west-1a
    ConstraintDescription: >-
      must be a private subnet associated with an availability zones. 
      It should be residing in the selected Virtual PrivateCloud.
  Private1b:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId in your Virtual Private Cloud (VPC) for eu-west-1a
    ConstraintDescription: >-
      must be a private subnet associated with an availability zones. 
      It should be residing in the selected Virtual PrivateCloud.
  # Subnets:
  #   Type: 'List<AWS::EC2::Subnet::Id>'
  #   Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  #   ConstraintDescription: >-
  #     must be a list of at least two existing subnets associated with at least
  #     two different availability zones. They should be residing in the selected
  #     Virtual Private Cloud.
  # Common Tags
  TagRole:
    Type: String
    Description: 'Tag: Role of resource.'
    AllowedValues:
      - web
      - services
      - testing
      - middleware
      - backend
  TagEnvironment:
    Type: String
    Description: 'Tag: Environment where the resource is spawned.'
    Default: dev
    AllowedValues:
      - dev
      - int
      - pro
  TagSLA:
    Type: String
    Description: 'Tag: Service-level agreement.'
    Default: 24x7
    AllowedValues:
      - '24x7'
      - '8x5'
  TagStartTime:
    Type: String
    Description: 'When is the resource spawned?, ie ''00:00''.'
    Default: '00:00'
  TagEndTime:
    Type: String
    Description: 'When is the resource terminated?, ie ''18:30''.'
    Default: '00:00'
  TagCECO:
    Type: String
    Description: 'Operation owner of resource deployed, ie ''the same as Operation tag''.'
    Default: euigs
  TagOperation:
    Type: String
    Description: 'Operation owner of resource deployed.'
    Default: euigs
    AllowedValues:
      - euigs
      - as
      - ct 
      - ef
  TagCompliance:
    Type: String
    Description: Compliance.
    Default: 'no'
    AllowedValues:
      - 'no'
      - 'yes'
  TagConfidentiality:
    Type: String
    Description: Confidentiality.
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'
  TagCommongSGPolicy:
    Type: String
    Description: Use a common security group based o security policies (WAF)
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'
  TagFirewallGlobalSecurityPolicy:
    Type: String
    Description: Apply Web Application Firewall Common Policies
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'
Resources:
##############################################################################################
# EC2 Instance                                                                               #
##############################################################################################
  ApplicationASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - "eu-west-1a"
        - "eu-west-1b"
      VPCZoneIdentifier: 
        - !Ref Private1a
        - !Ref Private1b
      LaunchConfigurationName: !Ref ApplicationLaunchConfig
      MinSize: !Ref MinimumASGCapacity
      MaxSize: !Ref MaximumASGCapacity
      DesiredCapacity: !Ref DesiredASGCapacity
      HealthCheckType: EC2
      HealthCheckGracePeriod: 60
      Cooldown: '80'
      Tags:
        - Key: Name
          Value: !Sub ${AccountName}-${ApplicationName}-asg
          PropagateAtLaunch: true
      #     PropagateAtLaunch: true
      #   - Key: ApplicationID
      #     Value: !Sub ${ApplicationName}
      #     PropagateAtLaunch: true
      #   - Key: Role
      #     Value: !Ref TagRole
      #     PropagateAtLaunch: true
      #   - Key: Environment
      #     Value: !Ref TagEnvironment
      #     PropagateAtLaunch: true
      #   - Key: SLA
      #     Value: !Ref TagSLA
      #     PropagateAtLaunch: true
      #   - Key: StartTime
      #     Value: !Ref TagStartTime
      #     PropagateAtLaunch: true
      #   - Key: EndTime
      #     Value: !Ref TagEndTime
      #     PropagateAtLaunch: true
      #   - Key: CECO
      #     Value: !Ref TagCECO
      #     PropagateAtLaunch: true
      #   - Key: Operation
      #     Value: !Ref TagOperation
      #     PropagateAtLaunch: true
      #   - Key: Confidentiality
      #     Value: !Ref TagConfidentiality
      #     PropagateAtLaunch: true
      #   - Key: Compliance
      #     Value: !Ref TagCompliance
      #     PropagateAtLaunch: true
    UpdatePolicy :
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        # MinSuccessfulInstancesPercent: 100
        PauseTime: PT5M
        WaitOnResourceSignals: false
        SuspendProcesses:
          - ScheduledActions
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
  # Application Autoscaling Group Schedule Action: Turn Off
  TurnOffAutoScalingScheduledAction:   
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref ApplicationASG
      DesiredCapacity: 0
      MaxSize: 0
      MinSize: 0
      Recurrence: 0 20 * * MON-FRI
  # Application Autoscaling Group Schedule Action: Turn On 
  TurnOnAutoScalingScheduledAction:   
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref ApplicationASG
      MinSize: !Ref MinimumASGCapacity
      MaxSize: !Ref MaximumASGCapacity
      DesiredCapacity: !Ref DesiredASGCapacity
      Recurrence: 0 7 * * MON-FRI
  ApplicationLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
          config:
              packages:
                  yum:
                      mariadb-server: []
                      mariadb: []
              commands: 
                  01_uploads:
                      command:
                        echo "done" > /home/ec2-user/test.txt
    Properties:
      SecurityGroups:
        - !Ref SecurityGroup
      ImageId: !Ref ASGAMIId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --region ${AWS::Region} --resource ApplicationLaunchConfig 
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource ApplicationASG
        

##############################################################################################
# Security group                                                                             #
##############################################################################################
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${AccountName}-${ApplicationName}-sg
      GroupDescription: >-
        Enable 3306 access via  + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref EUIGSCidrIp
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref EUIGSCidrIp
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AccountName}-${ApplicationName}-sg

##############################################################################################
# Instance profile                                                                           #
##############################################################################################
 
  ApplicationInstanceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  #  Application Instance Role Profile: 
  ApplicationInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      InstanceProfileName: !Sub ${AccountName}-${ApplicationName}-instance-role
      Path: "/"
      Roles:
        - Ref: ApplicationInstanceRole

