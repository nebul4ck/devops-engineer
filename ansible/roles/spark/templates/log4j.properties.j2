#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Set everything to be logged to the console
log4j.rootCategory={{ spark_log_level|default('INFO') }}, {{ spark_log_appender|default('FILE') }}

log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n

# Set the default spark-shell log level to WARN. When running the spark-shell, the
# log level for this class is used to overwrite the root logger's log level, so that
# the user can have different defaults for the shell and regular Spark apps.
log4j.logger.org.apache.spark.repl.Main={{ spark_log_level|default('INFO') }}

# Settings to quiet third party logs that are too verbose
log4j.logger.org.spark_project.jetty={{ spark_log_level|default('INFO') }}
log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle={{ spark_log_level|default('INFO') }}
log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper={{ spark_log_level|default('INFO') }}
log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter={{ spark_log_level|default('INFO') }}
log4j.logger.org.apache.parquet={{ spark_log_level|default('INFO') }}
log4j.logger.parquet={{ spark_log_level|default('INFO') }}

# SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support
log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler=FATAL
log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry=ERROR

spark.hostname={{ ansible_hostname }}
spark.log.dir={{ spark_log_dir|default('/var/log/spark') }}
spark.log.file=spark-server-${spark.hostname}.log
spark.log.threshold={{ spark_log_level|default('INFO') }}
spark.log.maxfilesize={{ spark_log_maxsize|default(104857600) }}
spark.log.maxbackupindex={{ spark_max_backup|default(3) }}

spark.tracelog.dir=${spark.log.dir}
spark.tracelog.file=spark_trace.log

#
# Add ROLLINGFILE to rootLogger to get log file output
#
log4j.appender.ROLLINGFILE=org.apache.log4j.rolling.RollingFileAppender
log4j.appender.ROLLINGFILE.Threshold=${spark.log.threshold}
log4j.appender.ROLLINGFILE.RollingPolicy=org.apache.log4j.rolling.FixedWindowRollingPolicy  
log4j.appender.ROLLINGFILE.RollingPolicy.maxIndex=${spark.log.maxbackupindex}
log4j.appender.ROLLINGFILE.TriggeringPolicy=org.apache.log4j.rolling.SizeBasedTriggeringPolicy
log4j.appender.ROLLINGFILE.TriggeringPolicy.MaxFileSize=${spark.log.maxfilesize}
log4j.appender.ROLLINGFILE.RollingPolicy.FileNamePattern=${spark.log.dir}/${spark.log.file}.%i.gz
log4j.appender.ROLLINGFILE.RollingPolicy.ActiveFileName=${spark.log.dir}/${spark.log.file}
log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n

#
# Add FILE to rootLogger to get log file output
#
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.Threshold=${spark.log.threshold}
log4j.appender.FILE.File=${spark.log.dir}/${spark.log.file}
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n