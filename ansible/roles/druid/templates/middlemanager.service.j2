[Unit]
Description=middlemanager Service
Documentation=http://druid.io

[Service]
Type={{ druid_service_type|default('simple') }}

User={{ druid_user|default('druid') }}
Group={{ druid_group|default('druid') }}

Environment='CLASSPATH={{ druid_base }}/lib/*:{{ druid_conf_base }}/_common:{{ druid_conf_base }}/middleManager'
Environment='JMX=-Dcom.sun.management.jmxremote.port={{ middlemanager_jmx_port|default(17074) }} -Dcom.sun.management.jmxremote.authenticate={{ middlemanager_jmxremote_authenticate|default('false') }} -Dcom.sun.management.jmxremote.ssl={{ middlemanager_jmxremote_ssl|default('false') }}'
Environment='TMP={{ druid_tmp_base }}/middlemanager'

ExecStart=/usr/bin/java -server {{ middlemanager_xmx|default('-Xmx64m') }} {{ middlemanager_xms|default('-Xmx64m') }} -Duser.timezone={{ druid_timezone|default('UTC') }} -Dfile.encoding={{ druid_encoding|default('UTF-8') }} \
			-Djava.io.tmpdir=${TMP} -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager \
			-Dorg.jboss.logging.provider=slf4j -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.SLF4JLogger \
			-Dlog4j.shutdownCallbackRegistry=io.druid.common.config.Log4jShutdown -Dlog4j.shutdownHookEnabled=true \
			-Dlog4j.configurationFile={{ druid_conf_base }}/middleManager/log4j2.xml \
			-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintGCApplicationStoppedTime \
			-XX:+PrintGCApplicationConcurrentTime -Xloggc:${TMP}/middlemanager.gc.log -XX:+UseGCLogFileRotation \
			-XX:NumberOfGCLogFiles={{ druid_number_of_gc_log_files|default(5) }} -XX:GCLogFileSize={{ druid_gc_log_file_size|default('10m') }} -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError \
			-XX:HeapDumpPath=${TMP}/middlemanager.hprof -XX:+PerfDisableSharedMem -XX:+UseConcMarkSweepGC -XX:-UseBiasedLocking \
			-classpath ${CLASSPATH} io.druid.cli.Main server middlemanager

# SIGTERM signal is used to stop the Java process
KillSignal={{ druid_kill_signal|default('SIGTERM') }}

# Java process is never killed
SendSIGKILL={{ druid_send_sig_kill|default('yes') }}
OOMScoreAdjust={{ druid_oom_score_adjust|default(1000) }}
Restart={{ druid_restart|default('on-failure') }}
RestartSec={{ druid_restart_sec|default('2000ms') }}

[Install]
WantedBy=default.target